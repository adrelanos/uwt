#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## $uwtwrapper_parent uwt wrapper.

## If you want to enable/disable uwt and/or privacy
## globally or for certain applications, see /etc/uwt.d/.

## Technical comment:
## - time_privacy is called time_privacy, because this script may get added
##   upstream to the Debian package faketime. This is to avoid a conflict, when
##   the new file timeprivacy gets installed by faketime.

#set -x

set -e
set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"

error_handler() {
   echo "
## uwtwrapper BUG.
## SCRIPTNAME: $SCRIPTNAME
## uwtwrapper_parent: $uwtwrapper_parent
## BASH_COMMAND: $BASH_COMMAND
## Please report this BUG!
"
   exit 1
}

trap "error_handler" ERR

show_help() {
   echo "\
$0 help.

$0 is not supposed to be used manually by users.
Manual usage is difficult. Use uwt instead. See:
man uwt

If you are a very advanced user or developer, who wants to learn more about
uwt wrappers, read ahead.

uwtwrappers and $0 are hacks to socksify applications that do
not support native socks proxy settings. Used to implement Stream Isolation.
https://www.whonix.org/wiki/Stream_Isolation

In essence, uwtwrappers are installed so users can type commands like
apt-get normally while transparently injecting torsocks, thereby stream
isolating them.

To understand better how uwt wrappers function, you could for example open
/usr/bin/apt-get.anondist in an editor.

Also useful to run:
ls -la /usr/bin/apt-get*

You will see, that /usr/bin/apt-get has been replaced with a symlink to
/usr/bin/apt-get.anondist. (This was done using config-package-dev.)

/usr/bin/apt-get.anondist is a uwt wrapper.

/usr/bin/apt-get.anondist-orig is the original apt-get binary.

If you want to add additional uwtwrappers you need the files and symlink in
place as well as uwt settings. See also the /etc/uwt.d configuration folder.

source code:
https://github.com/Whonix/uwt"
}

parse_cmd() {
   ## Only use the command line parser if $uwtwrapper_parent is empty. I.e. when
   ## manually called from command line instead by a wrapper. Otherwise it would
   ## interfere with the forwarded options to application. I.e. for example
   ## 'apt-get --help' would break.
   if [ ! "$uwtwrapper_parent" = "" ]; then
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   while true;
   do
      case $1 in
         -h|-\?|--help)
            show_help
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            break
      esac
      shift
   done

   # If there are input files (for example) that follow the options, they
   # will remain in the "$@" positional parameters.
}

preparation() {
   declare -A -g timeprivacy
   declare -A -g uwtwrapper
   declare -A -g uwtport
   declare -A -g bindp_use

   ## Remove the leading '.anondist' file extension. This is useful in case for
   ## example uwtwrapper_parent is called by running
   ## 'exec /usr/bin/apt-get.anondist', such as eatmydata is doing.
   uwtwrapper_parent="${uwtwrapper_parent%".anondist"}"
}

alternatives_support() {
   if [ ! -e "$uwtwrapper_parent.anondist-orig" ]; then
      ## For example /usr/bin/aptitude.anondist-orig does not exist.

      ## Example basename_uwtwrapper_parent:
      ## aptitude
      basename_uwtwrapper_parent="${uwtwrapper_parent##*/}"

      ## Lets see if /usr/bin/aptitude is actually a symlink to /etc/alternatives/aptitude.
      if [ -e "/etc/alternatives/$basename_uwtwrapper_parent" ]; then
         ## Lets see where for example /etc/alternatives/aptitude links to and use it.
         if readlink_result="$(readlink "/etc/alternatives/$basename_uwtwrapper_parent")" ; then
            ## Symlink could be read. Lets use it.
            uwtwrapper_parent="$readlink_result"
         fi
      fi
   fi
}

sanity_tests_general() {
   if [ "$uwtwrapper_parent" = "" ]; then
      echo "ERROR: You are not supposed to run $0 manually from the command line."
      echo "See:" >&2
      echo "$0 --help" >&2
      exit 255
   fi
   if [ ! -e "$uwtwrapper_parent.anondist-orig" ]; then
      if ! command -v command-not-found >/dev/null 2>/dev/null ; then
         echo "$SCRIPTNAME uwt wrapper ERROR: $uwtwrapper_parent.anondist-orig does not exist."
         exit 1
      fi
      ## Example basename_uwtwrapper_parent:
      ## aptitude
      basename_uwtwrapper_parent="${uwtwrapper_parent##*/}"
      ## --ignore-installed is used, because the uwt wrapper (for example
      ## /usr/bin/aptitude) will already be installed.
      exec command-not-found --ignore-installed "$basename_uwtwrapper_parent"
   fi
   if [ ! -x "$uwtwrapper_parent.anondist-orig" ]; then
      echo "$SCRIPTNAME uwt wrapper ERROR: $uwtwrapper_parent.anondist-orig is not executable."
      exit 1
   fi
}

variables() {
   [ -n "$timeprivacy_global" ] || timeprivacy_global="0"
   [ -n "$uwtwrapper_global" ] || uwtwrapper_global="1"

   [ -n "${uwtport["/usr/bin/git"]}" ] || uwtport["/usr/bin/git"]="9107"
   [ -n "${uwtport["/usr/bin/apt-get"]}" ] || uwtport["/usr/bin/apt-get"]="9104"
   [ -n "${uwtport["/usr/bin/curl"]}" ] || uwtport["/usr/bin/curl"]="9117"
   [ -n "${uwtport["/usr/bin/gpg"]}" ] || uwtport["/usr/bin/gpg"]="9105"
   [ -n "${uwtport["/usr/bin/mixmaster-update"]}" ] || uwtport["/usr/bin/mixmaster-update"]="9120"
   [ -n "${uwtport["/usr/bin/rawdog"]}" ] || uwtport["/usr/bin/rawdog"]="9118"
   [ -n "${uwtport["/usr/bin/ssh"]}" ] || uwtport["/usr/bin/ssh"]="9106"
   [ -n "${uwtport["/usr/bin/wget"]}" ] || uwtport["/usr/bin/wget"]="9109"
   [ -n "${uwtport["/usr/bin/aptitude-curses"]}" ] || uwtport["/usr/bin/aptitude-curses"]="9124"
   [ -n "${uwtport["/usr/bin/yum"]}" ] || uwtport["/usr/bin/yum"]="9125"
   [ -n "${uwtport["/usr/bin/yumdownloader"]}" ] || uwtport["/usr/bin/yumdownloader"]="9125"

   [ -n "${bindp_use["/usr/bin/onionshare"]}" ] || bindp_use["/usr/bin/onionshare"]="true"
   [ -n "${bindp_use["/usr/bin/onionshare-gui"]}" ] || bindp_use["/usr/bin/onionshare-gui"]="true"

   for bindp_use_item in "${!bindp_use[@]}" ; do
     if [ "$uwtwrapper_parent" = "$bindp_use_item" ]; then
        if [ "${bindp_use[$bindp_use_item]}" = "true" ]; then
           bindp_dispatch="true"
           break
        fi
     fi
   done
}

settings_detection() {
   if [ "$UWT_DEV_PASSTHROUGH" = "1" ]; then
      ## Can be the case when building Whonix from source code.
      GATEWAY_IP="UWT_DEV_PASSTHROUGH"
      return 0
   fi

   if command -v qubesdb-read >/dev/null 2>&1 ; then
      ## '/qubes-vm-type' is either 'AppVM', 'ProxyVM', 'NetVM' or 'TemplateVM'
      qubes_vm_type="$(qubesdb-read /qubes-vm-type)"
      if [ "$qubes_vm_type" = "TemplateVM" ] || [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
         ## 'qubesdb-read /qubes-gateway' could fail if NetVM is set to 'none'.
         GATEWAY_IP="$(qubesdb-read /qubes-gateway 2>/dev/null)" || { GATEWAY_IP_ERROR="qubesdb_read_failed"; GATEWAY_IP="127.0.0.1"; };
         return 0
      fi
   fi

   if [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      GATEWAY_IP="10.152.152.10"
      return 0
   fi

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      GATEWAY_IP="127.0.0.1"
      return 0
   fi

   error "\
uwt wrapper could not determine if this is Whonix-Workstation or Whonix-Gateway.
Variable GATEWAY_IP does not exist early enough in /etc/uwt.d.
If you are using a Custom-Workstation, please consider installing the
anon-gw-base-files or anon-ws-base-files package.
If you are not using a Custom-Workstation: please report this bug!"
}

source_config_folder() {
   shopt -s nullglob
   for i in /etc/uwt.d/*.conf /rw/config/uwt.d/*.conf; do
      bash -n "$i"
      source "$i"
   done
}

source_config_folder
parse_cmd ${1+"$@"}
preparation
variables
alternatives_support
sanity_tests_general
settings_detection

[ -n "$bindp_so" ] || bindp_so="/usr/lib/uwt/libindp.so"
[ -n "$bindp_interface" ] || bindp_interface="eth0"
[ -n "$bindp_address" ] || bindp_address="$(/sbin/ifconfig "$bindp_interface" | grep -oP 'inet addr:\K\S+')" || true
[ -n "$bindp_address" ] || bindp_address="127.0.0.1"

if [ "$bindp_dispatch" = "true" ]; then
   exec \
      BIND_ADDR="$bindp_address" \
      LD_PRELOAD="$bindp_so" \
      "$uwtwrapper_parent.anondist-orig" \
      ${1+"$@"}
fi

port="${uwtport["$uwtwrapper_parent"]}"

if [ "${timeprivacy["$uwtwrapper_parent"]}" = "1" ]; then
   fake_time="faketime"
   privacy_time="$("time_privacy" -f "/tmp/timeprivacy_$SCRIPTNAME_CLEANED")"
else
   if [ "$timeprivacy_global" = "1" ]; then
      fake_time="faketime"
      privacy_time="$("time_privacy")"
   else
      fake_time=""
      privacy_time=""
   fi
fi

if [ "$uwtwrapper_global" = "0" ]; then
   if [ "$fake_time" = "faketime" ]; then
      exec "$fake_time" "$privacy_time" "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
   else
      exec "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
   fi
fi

if [ "${uwtwrapper["$uwtwrapper_parent"]}" = "0" ]; then
   if [ "$fake_time" = "faketime" ]; then
      exec "$fake_time" "$privacy_time" "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
   else
      exec "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
   fi
fi

if [ "$fake_time" = "faketime" ]; then
   exec "$fake_time" "$privacy_time" "/usr/bin/uwt" -t 5 -i "$GATEWAY_IP" -p "$port" "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
else
   exec "/usr/bin/uwt" -t 5 -i "$GATEWAY_IP" -p "$port" "$uwtwrapper_parent.anondist-orig" ${1+"$@"}
fi
